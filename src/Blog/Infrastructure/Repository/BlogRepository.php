<?php

/**
 * @author Andrei Shilkov <aishilkov94@gmail.com>
 * @license MIT
 *
 * @see https://github.com/ashilkov/symfony-blog
 */

namespace App\Blog\Infrastructure\Repository;

use App\Blog\Domain\Model\Blog as DomainEntity;
use App\Blog\Domain\Model\EntityInterface;
use App\Blog\Domain\Repository\BlogRepositoryInterface;
use App\Blog\Domain\Value\Blog\BlogId;
use App\Blog\Infrastructure\Doctrine\Assembler\AssemblerInterface;
use App\Blog\Infrastructure\Doctrine\Assembler\BlogUserAssembler;
use App\Blog\Infrastructure\Doctrine\Entity\Blog;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Blog>
 */
class BlogRepository extends AbstractRepository implements BlogRepositoryInterface
{
    public function __construct(
        EntityManagerInterface $entityManager,
        AssemblerInterface $entityAssembler,
        ManagerRegistry $registry,
        private BlogUserAssembler $blogUserAssembler,
    ) {
        parent::__construct($entityManager, $entityAssembler, $registry);
    }

    public function getEntityType(): string
    {
        return Blog::class;
    }

    /**
     * @throws \Exception
     */
    public function findWithSubscriptions(?int $userId): array
    {
        $result = $this->createQueryBuilder('b')
            ->select('b as blog')
            ->addSelect('(CASE WHEN s.id IS NULL THEN 0 ELSE 1 END) AS subscribed')
            ->leftJoin('b.subscriptions', 's', 'WITH', 's.subscriberId = :userId AND s.blog = b')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->getResult();

        foreach ($result as &$item) {
            $item['blog'] = $this->entityAssembler->toDomain($item['blog']);
        }

        return $result;
    }

    protected function saveAfter(EntityInterface|DomainEntity $entity, object $doctrineEntity): void
    {
        parent::saveAfter($entity, $doctrineEntity); // TODO: Change the autogenerated stub

        if (method_exists($entity, 'assignId') && property_exists($doctrineEntity, 'id')) {
            $entity->assignId(new BlogId($doctrineEntity->id));
        }

        foreach ($entity->getBlogUsers() as $blogUser) {
            $blogUser->attachToBlog($entity->getId());
            $doctrineBlogUser = $this->blogUserAssembler->toDoctrineEntity($blogUser);
            $this->entityManager->persist($doctrineBlogUser);
        }

        $this->entityManager->flush();
    }
}
